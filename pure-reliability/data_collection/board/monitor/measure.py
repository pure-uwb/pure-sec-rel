import os
import h5py
import time
import multiprocessing
import sys
import numpy as np
import random
import argparse
import datetime

#TODO install as a module
sys.path.append('/home/vagrant/dwm3000-monitor-release/dwm3000-monitor/')
from HDF5Storage import HDF5Storage
from QorvoDWM3000EVB import QorvoDWM3000EVB

class init_cfg():
    """
    Configuration of the initiator.
    """
    gdb_port=1234
    usb_id=682111341
    ykush_serial="YK23299"
    ykush_port=1
    elf_file="/home/vagrant/dwm3000-monitor-release/dwm3000-firmware/examples/own_ss_twr_cfo_monitored_initiator/build/zephyr/zephyr.elf"
    example="own_ss_twr_cfo_monitored_initiator"

class resp_cfg():
    """
    Configuration of the responder.
    """
    gdb_port=1235
    usb_id=682111612
    ykush_serial="YK23299"
    ykush_port=3
    elf_file="/home/vagrant/dwm3000-monitor-release/dwm3000-firmware/examples/own_ss_twr_cfo_monitored_responder/build/zephyr/zephyr.elf"
    example="own_ss_twr_cfo_monitored_responder"

def build_and_flash(cfg):
    """
    Build and flash with Nordic tools. Reset with ykush.
    """
    cmd = f"""
    ykushcmd -s {cfg.ykush_serial} -d a && 
    ykushcmd -s {cfg.ykush_serial} -u {cfg.ykush_port} &&
    sleep 2 &&
    cd /home/vagrant/dwm3000-monitor-release/dwm3000-firmware/examples/ &&
    bash build.sh {cfg.example} flash &&
    ykushcmd -s {cfg.ykush_serial} -d a
    """
    os.system(f"{cmd}")
    time.sleep(2)

#https:dd//stackoverflow.com/questions/18492273/combining-hdf5-files
def merge_files():
    """
    Merge hdf5 files generated by different processes.
    """
    d_names = ["init.hdf5.tmp", "resp.hdf5.tmp"]
    d_struct = {} 
    for i in d_names:
        f = h5py.File(i,'r+')
        d_struct[i] = list(f.keys())
        f.close()

    os.system("rm -rf output.hdf5")
    for i in d_names:
        for j  in d_struct[i]:
            os.system('h5copy -i %s -o output.hdf5 -s %s -d %s' % (i, j, j))
    
    for i in d_names:
        os.system('rm -rf %s' % (i))

def add(counter, i):
    """
    Increment counter in Base 16.
    """
    # TODO cleaner way
    return hex(int(counter, base=16)+i)[2:]

def init_worker(key, nonce, counter, resp_ready, init_ready, end, number):
    """
    Worker that controls the initiator.
    """
    storage = HDF5Storage(filename="init.hdf5.tmp")
    
    init_dut = QorvoDWM3000EVB(
            gdb_port=init_cfg.gdb_port,
            usb_id=init_cfg.usb_id,
            ykush_serial=init_cfg.ykush_serial,
            ykush_port=init_cfg.ykush_port,
            gdb_exe='/home/vagrant/zephyr-sdk-0.15.1/arm-zephyr-eabi/bin/arm-zephyr-eabi-gdb',
            elf_file =init_cfg.elf_file
    )
    
    init_dut.start()
    
    buffering = 5
    init_dut.set_key(key)
    init_dut.set_iv(add(nonce+counter,0))
    resp_ready.get() # Wait responder to be ready
    start_time = time.perf_counter()
    for i in range(number):
        init_ready.put("starting_ranging") # tell resp we start
        resp_ready.get() # wait resp is ready
        ranging_start_time_s = time.perf_counter() - start_time
        init_dut.target.cont()
        init_dut.target.wait()
        init_dut.set_key(key)
        init_dut.set_iv(add(nonce+counter,i+1))
        diags = init_dut.get_diagnostics()
        diags['ranging_start_time_s'] = ranging_start_time_s
        storage.save_to_buffer(diags)
        if len(storage.buffer) >= buffering:
            storage.save_buffer_to_file()
    storage.save_buffer_to_file()
    init_ready.put("ending")
    end.set()
    init_dut.stop()
    print("Initiator quitting")
   
def resp_worker(key, nonce, counter, resp_ready, init_ready, end):
    """
    Worker that controls the responder.
    """
    storage = HDF5Storage(filename="resp.hdf5.tmp")
    
    resp_dut = QorvoDWM3000EVB(
            gdb_port=resp_cfg.gdb_port,
            usb_id=resp_cfg.usb_id,
            ykush_serial=resp_cfg.ykush_serial,
            ykush_port=resp_cfg.ykush_port,
            gdb_exe='/home/vagrant/zephyr-sdk-0.15.1/arm-zephyr-eabi/bin/arm-zephyr-eabi-gdb',
            elf_file =resp_cfg.elf_file
    )

    buffering = 5
    resp_dut.start()
    time.sleep(2)
    resp_dut.set_key(key)
    resp_dut.set_iv(add(nonce+counter,0))
    resp_ready.put("rx_ready")
    i = 0
    while True:
        init_ready.get()
        if end.is_set():
            break
        else:
            resp_dut.target.cont()
            resp_ready.put("resp waiting")
            resp_dut.target.wait()
            resp_dut.set_key(key)
            resp_dut.set_iv(add(nonce+counter,i+1))
            diags = {}
            storage.save_to_buffer(diags)
            if len(storage.buffer) >= buffering:
                storage.save_buffer_to_file()
            i += 1
 
    resp_dut.stop()
    storage.save_buffer_to_file()
    print("Responder quitting")

def main():
    """
    Main app with CLI.
    """
    # CLI
    parser = argparse.ArgumentParser()
    parser.add_argument("--build-and-flash", type=bool, default=False)
    parser.add_argument("--number", type=int, default=10)
    parser.add_argument("--seed", type=int, default=0)
    args = parser.parse_args()
    
    # Compile and flash
    if args.build_and_flash:
        print("Building and flashing initiator")
        build_and_flash(init_cfg)
        print("Building and flashing responder")
        build_and_flash(resp_cfg)

    # The real experiment
    print("Starting the experiment")

    start_time = time.perf_counter()

    resp_ready = multiprocessing.Queue()
    init_ready = multiprocessing.Queue()
    end = multiprocessing.Event()

    random.seed(args.seed)
    values = ['0','1','2','3','4','5','6','7','8','9', 'a', 'b', 'c', 'd', 'e', 'f']
    key = ''.join(np.random.choice(values,32))
    nonce = ''.join(np.random.choice(values,24))
    counter = ''.join(np.random.choice(['0'],8))

    init_p = multiprocessing.Process(
            name="init-process",
            target=init_worker,
            args=(key, nonce, counter, resp_ready, init_ready, end, args.number)
    )
    resp_p = multiprocessing.Process(
            name="resp-process",
            target=resp_worker,
            args=(key, nonce, counter, resp_ready, init_ready, end)
    )

    resp_p.start()
    time.sleep(2)
    init_p.start()
 
    resp_ready.close()
    init_ready.close()
    resp_p.join()
    init_p.join()

    merge_files()

    execution_time = time.perf_counter() - start_time
    print(f"Execution time {execution_time} s")

if __name__ == "__main__":
    main() 

